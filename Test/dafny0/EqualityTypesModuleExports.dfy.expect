EqualityTypesModuleExports.dfyp(13,8): Error: set argument type must support equality (got Klm) (perhaps try declaring type parameter 'Klm' on line 11 as 'Klm(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(13,23): Error: set argument type must support equality (got Klm) (perhaps try declaring type parameter 'Klm' on line 11 as 'Klm(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(32,15): Error: type parameter (X) passed to function Fib must support equality (got Y) (perhaps try declaring type parameter 'Y' on line 26 as 'Y(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(32,23): Error: set argument type must support equality (got Y) (perhaps try declaring type parameter 'Y' on line 26 as 'Y(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(34,13): Error: set argument type must support equality (got GG) (perhaps try declaring type parameter 'GG' on line 21 as 'GG(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(84,7): Error: type 'Syn4' declared as supporting equality, but the RHS type ((real, A)) might not
EqualityTypesModuleExports.dfyp(92,7): Error: type 'Subset4' declared as supporting equality, but the RHS type ((A, int)) might not
EqualityTypesModuleExports.dfyp(50,11): Error: type parameter (X) passed to type Dt0 must support equality (got M) (perhaps try declaring type parameter 'M' on line 48 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(51,11): Error: type parameter (Y) passed to type Dt1 must support equality (got M) (perhaps try declaring type parameter 'M' on line 48 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(52,11): Error: type parameter (Z) passed to type Dt2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 48 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(65,11): Error: type parameter 0 (X) passed to type Co0 must support equality (got M) (perhaps try declaring type parameter 'M' on line 63 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(66,11): Error: type parameter 0 (Y) passed to type Co1 must support equality (got M) (perhaps try declaring type parameter 'M' on line 63 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(67,11): Error: type parameter 0 (Z) passed to type Co2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 63 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(99,11): Error: type parameter 0 (B) passed to type Opaque2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(105,12): Error: type parameter 1 (C) passed to type O'Pake2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(110,11): Error: type parameter (A) passed to type Syn2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(115,11): Error: type parameter (A) passed to type Syn5 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(117,11): Error: type parameter 0 (C) passed to type Syn6 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(121,11): Error: type parameter (A) passed to type Subset1 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(123,11): Error: type parameter (A) passed to type Subset2 must support equality (got M) (perhaps try declaring type parameter 'M' on line 94 as 'M(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(133,11): Error: type parameter (A) passed to type Syn5 must support equality (got ListWithALittlExtra<int>)
EqualityTypesModuleExports.dfyp(134,11): Error: type parameter (A) passed to type Syn5 must support equality (got Co2<int, int>)
EqualityTypesModuleExports.dfyp(135,11): Error: type parameter (A) passed to type Syn5 must support equality (got Opaque0) (perhaps try declaring opaque type 'Opaque0' on line 73 as 'Opaque0(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(139,11): Error: type parameter (A) passed to type Syn5 must support equality (got Syn1<int -> int>)
EqualityTypesModuleExports.dfyp(153,11): Error: type parameter (A) passed to type MyClass must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(154,11): Error: type parameter (A) passed to type Dt must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(155,11): Error: type parameter (A) passed to type Co must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(156,11): Error: type parameter (A) passed to type Syn must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(157,11): Error: type parameter (A) passed to type SubsetCo must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(149,7): Error: recursive constraint dependency involving a subset type: SubsetCo -> Co -> SubsetCo
EqualityTypesModuleExports.dfyp(174,11): Error: type parameter (A) passed to type MyClass must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(175,11): Error: type parameter (A) passed to type Dt must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(176,11): Error: type parameter (A) passed to type Co must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(177,11): Error: type parameter (A) passed to type Syn must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(178,11): Error: type parameter (A) passed to type SubsetCo must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(170,7): Error: recursive constraint dependency involving a subset type: SubsetCo -> Co -> SubsetCo
EqualityTypesModuleExports.dfyp(188,22): Error: set argument type must support equality (got A) (perhaps try declaring type parameter 'A' on line 188 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(189,24): Error: iset argument type must support equality (got A) (perhaps try declaring type parameter 'A' on line 189 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(195,11): Error: type parameter (A) passed to type MyClass must support equality (got Noeq)
EqualityTypesModuleExports.dfyp(191,7): Error: recursive constraint dependency involving a subset type: SubsetCo -> Co -> SubsetCo
EqualityTypesModuleExports.dfyp(214,7): Error: type 'Opa', which does not support equality, is used to refine an opaque type with equality support
EqualityTypesModuleExports.dfyp(230,12): Error: type parameter (A) passed to type S must support equality (got GGG.Opa'<int>) (perhaps try declaring opaque type 'Opa'' on line 208 as 'Opa'(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypesModuleExports.dfyp(231,12): Error: type parameter (A) passed to type S must support equality (got GGG.Syn'<int>)
EqualityTypesModuleExports.dfyp(232,12): Error: type parameter (A) passed to type S must support equality (got GGG.Sub'<int>)
EqualityTypesModuleExports.dfyp(249,7): Error: == can only be applied to expressions of types that support equality (got WWW0.XT)
EqualityTypesModuleExports.dfyp(252,7): Error: == can only be applied to expressions of types that support equality (got WWW0.YT)
EqualityTypesModuleExports.dfyp(255,7): Error: == can only be applied to expressions of types that support equality (got WWW0.ZT)
EqualityTypesModuleExports.dfyp(258,7): Error: == can only be applied to expressions of types that support equality (got WWW0.WT)
EqualityTypesModuleExports.dfyp(283,7): Error: type 'A' declared as supporting equality, but the RHS type (QQQ1.Syn<int>) might not
EqualityTypesModuleExports.dfyp(298,7): Error: type 'ExportedType' declared as supporting equality, but the RHS type (PrivateType<A>) might not
EqualityTypesModuleExports.dfyp(346,4): Error: == can only be applied to expressions of types that support equality (got List<A>)
EqualityTypesModuleExports.dfyp(366,9): Warning: note, this export set is empty (did you perhaps forget the 'provides' or 'reveals' keyword?)
EqualityTypesModuleExports.dfyp(409,7): Error: type 'Synonym' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfyp(410,7): Error: type 'AnotherSynonym' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfyp(413,7): Error: type 'NESynonym' declared as auto-initialization type, but the RHS type (NonEmpty) does not support auto-initialization
EqualityTypesModuleExports.dfyp(417,7): Error: type 'NoReference' declared as containing no reference types, but the RHS type (C?) may contain reference types
EqualityTypesModuleExports.dfyp(420,7): Error: type 'PipeDreamEquality' declared as supporting equality, but the RHS type (Stream) might not
EqualityTypesModuleExports.dfyp(425,7): Error: type 'Subset' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfyp(426,7): Error: type 'AnotherSubset' declared as being nonempty, but the RHS type (Empty) may be empty
EqualityTypesModuleExports.dfyp(429,7): Error: type 'NESynonym' declared as auto-initialization type, but the RHS type (NonEmpty) does not support auto-initialization
EqualityTypesModuleExports.dfyp(433,7): Error: type 'NoReference' declared as containing no reference types, but the RHS type (C?) may contain reference types
EqualityTypesModuleExports.dfyp(436,7): Error: type 'PipeDreamEquality' declared as supporting equality, but the RHS type (Stream) might not
61 resolution/type errors detected in EqualityTypesModuleExports.dfyp
