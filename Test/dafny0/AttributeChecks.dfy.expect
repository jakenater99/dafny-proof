// AttributeChecks.dfyp


module JustAboutEverything {
  datatype List<T> = Nil | Cons(hd: T, tl: List<T>)

  datatype {:dt 0} {:dt false + 3} Datatype = {:dt k} Blue | {:dt 50} Green

  datatype {:dt 0} {:dt false + 3} AnotherDatatype = {:dt 50} Blue | {:dt k} Green

  iterator Iter(x: int) yields (y: int)
    requires {:myAttr false + 3} true
    modifies {:myAttr false + 3} {}
    yield requires {:myAttr false + 3} true
    yield ensures {:myAttr false + 3} true
    ensures {:myAttr false + 3} true
    decreases {:myAttr false + 3} x
  {
  }

  iterator Jter(x: int) yields (y: int)
    requires {:myAttr old(3)} true
    modifies {:myAttr old(3)} {}
    yield requires {:myAttr old(3)} true
    yield ensures {:myAttr old(3)} true
    ensures {:myAttr old(3)} true
    decreases {:myAttr old(3)} x
  {
  }

  iterator Kter(x: int) yields (y: int)
    requires {:myAttr x, y, ys} true
    modifies {:myAttr x, y, ys} {}
    yield requires {:myAttr x, y, ys} true
    yield ensures {:myAttr x, y, ys} true
    ensures {:myAttr x, y, ys} true
    decreases {:myAttr x, y, ys} x
  {
  }

  method If(n: int) returns (k: int)
  {
    var i := 0;
    if {:split true} i < n {
      if {:split 1 + 0} true {
      }
    } else if {:split false} i > n {
    } else {:split true} {
    }
  }

  method IfAlt(n: int) returns (k: int)
  {
    var i := 0;
    if {:split true}
    case {:split 1 + true} i < n =>
      if {:split 1 + k} true {
      }
    case {:split false} i > n =>
      {
      }
      return 2;
  }

  method While(n: int) returns (k: int)
  {
    var f: int -> int := x => x;
    var i := 0;
    while {:split true} {:split true + k} i < n
      invariant forall u :: f(u) == u + i
    {
    }
    return 2;
  }

  method WhileAlt(n: int) returns (k: int)
  {
    var i := 0;
    var f: int -> int := x => x;
    while {:split}
      invariant forall u :: f(u) == u + i
    {
      case {:split 1 + true} i < n =>
        {
        }
      case {:split false} i > n =>
        return 2;
    }
  }

  method Match(xs: List<int>) returns (r: int)
  {
    match {:split 1} xs {
      case {:split false} Cons(y, z) =>
        return y;
      case {:split 1 + false} Nil =>
        return 0;
    }
  }

  function method CaseExpr(r: List<int>): List<int>
  {
    match r {
      case Nil =>
        Nil
      case {:ignore 3 + true} Cons(h, Nil) =>
        Nil
      case {:ignore false} Cons(h, t) =>
        CaseExpr(t)
    }
  }

  method Calc(x: int, y: int)
  {
    calc {:split 1} {:split 1 + false} {
      x + y;
      {
        assume x == 0;
      }
      y;
    }
    assert x == 0;
  }

  method ForAll(i: int, j: int, arr: array2<int>)
  {
    forall i, j {:split 1 + false} {:split i + j} | i in {-3, 4} && j in {1, 2} {
      arr[i, j] := 0;
    }
  }

  method AssertBy(x: int, y: int)
  {
    assert {:split false + x} {:split} x == 6 by {
      assume x == 6;
      assume y == 8;
    }
    assert {:split} y == 8;
  }

  method For(lo: int, hi: int) returns (k: int)
    requires lo <= hi
  {
    var f: int -> int := x => x;
    for {:split i} {:split true + k} i := lo to hi
      invariant forall u :: f(u) == u + i
    {
    }
    return 2;
  }

  function FAttr(x: int): int
    requires {:myAttr false + 3} true
    ensures {:myAttr false + 3} true
    decreases {:myAttr false + 3} x
  {
    10
  }

  function GAttr(x: int): int
    requires {:myAttr old(3)} true
    ensures {:myAttr old(3)} true
    decreases {:myAttr old(3)} x
  {
    10
  }

  function HAttr(x: int): (r: int)
    requires {:myAttr x, r} true
    ensures {:myAttr x, r} true
    decreases {:myAttr x, r} x
  {
    10
  }

  twostate function F2Attr(x: int): int
    requires {:myAttr false + 3} true
    ensures {:myAttr false + 3} true
    decreases {:myAttr false + 3} x
  {
    10
  }

  twostate function G2Attr(x: int): int
    requires {:myAttr old(3)} true
    ensures {:myAttr old(3)} true
    decreases {:myAttr old(3)} x
  {
    10
  }

  twostate function H2Attr(x: int): (r: int)
    requires {:myAttr x, r} true
    ensures {:myAttr x, r} true
    decreases {:myAttr x, r} x
  {
    10
  }

  method MAttr(x: int) returns (y: int)
    requires {:myAttr false + 3} true
    modifies {:myAttr false + 3} {}
    ensures {:myAttr false + 3} true
    decreases {:myAttr false + 3} x
  {
  }

  method NAttr(x: int) returns (y: int)
    requires {:myAttr old(3)} true
    modifies {:myAttr old(3)} {}
    ensures {:myAttr old(3)} true
    decreases {:myAttr old(3)} x
  {
  }

  method OAttr(x: int) returns (y: int)
    requires {:myAttr x, y} true
    modifies {:myAttr x, y} {}
    ensures {:myAttr x, y} true
    decreases {:myAttr x, y} x
  {
  }

  twostate lemma M2Attr(x: int) returns (y: int)
    requires {:myAttr false + 3} true
    modifies {:myAttr false + 3} {}
    ensures {:myAttr false + 3} true
    decreases {:myAttr false + 3} x
  {
  }

  twostate lemma N2Attr(x: int) returns (y: int)
    requires {:myAttr old(3)} true
    modifies {:myAttr old(3)} {}
    ensures {:myAttr old(3)} true
    decreases {:myAttr old(3)} x
  {
  }

  twostate lemma O2Attr(x: int) returns (y: int)
    requires {:myAttr x, y} true
    modifies {:myAttr x, y} {}
    ensures {:myAttr x, y} true
    decreases {:myAttr x, y} x
  {
  }

  method ModifyStatement(s: set<object>)
  {
    modify {:myAttr false + 3} s;
  }
}

module {:myAttr false + 3} {:myAttr old(3)} {:myAttr k} Modu {
}
AttributeChecks.dfyp(104,9): Error: unresolved identifier: k
AttributeChecks.dfyp(103,30): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(103,30): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(107,27): Error: unresolved identifier: k
AttributeChecks.dfyp(106,30): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(106,30): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(211,29): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(211,29): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(208,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(208,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(206,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(206,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(207,34): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(207,34): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(209,33): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(209,33): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(210,27): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(210,27): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(221,23): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(218,22): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(216,22): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(217,28): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(231,26): Error: unresolved identifier: y
AttributeChecks.dfyp(231,29): Error: unresolved identifier: ys
AttributeChecks.dfyp(228,25): Error: unresolved identifier: y
AttributeChecks.dfyp(228,28): Error: unresolved identifier: ys
AttributeChecks.dfyp(226,25): Error: unresolved identifier: y
AttributeChecks.dfyp(226,28): Error: unresolved identifier: ys
AttributeChecks.dfyp(19,19): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(19,19): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(29,37): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(29,37): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(43,21): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(43,21): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(53,21): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(53,21): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(61,22): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(61,22): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(68,30): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(68,30): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(78,27): Error: type of left argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(78,27): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(85,25): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(85,25): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(96,32): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(96,32): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(110,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(110,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(111,27): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(111,27): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(112,29): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(112,29): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(118,22): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(119,21): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(120,23): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(126,25): Error: unresolved identifier: r
AttributeChecks.dfyp(128,26): Error: unresolved identifier: r
AttributeChecks.dfyp(134,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(134,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(135,27): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(135,27): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(136,29): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(136,29): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(150,25): Error: unresolved identifier: r
AttributeChecks.dfyp(152,26): Error: unresolved identifier: r
AttributeChecks.dfyp(158,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(158,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(159,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(159,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(161,29): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(161,29): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(160,27): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(160,27): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(166,22): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(167,22): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(169,23): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(174,25): Error: unresolved identifier: y
AttributeChecks.dfyp(175,25): Error: unresolved identifier: y
AttributeChecks.dfyp(177,26): Error: unresolved identifier: y
AttributeChecks.dfyp(183,33): Error: twostate lemmas are not allowed to have modifies clauses
AttributeChecks.dfyp(182,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(182,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(183,28): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(183,28): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(185,29): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(185,29): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(184,27): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(184,27): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(191,22): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(191,30): Error: twostate lemmas are not allowed to have modifies clauses
AttributeChecks.dfyp(193,23): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(198,25): Error: unresolved identifier: y
AttributeChecks.dfyp(199,25): Error: unresolved identifier: y
AttributeChecks.dfyp(199,28): Error: twostate lemmas are not allowed to have modifies clauses
AttributeChecks.dfyp(201,26): Error: unresolved identifier: y
AttributeChecks.dfyp(236,26): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(236,26): Error: type of right argument to + (int) must agree with the result type (bool)
AttributeChecks.dfyp(243,11): Error: unresolved identifier: k
AttributeChecks.dfyp(242,11): Error: old expressions are not allowed in this context
AttributeChecks.dfyp(241,17): Error: type of + must be of a numeric type, a bitvector type, ORDINAL, char, a sequence type, or a set-like or map-like type (instead got bool)
AttributeChecks.dfyp(241,17): Error: type of right argument to + (int) must agree with the result type (bool)
101 resolution/type errors detected in AttributeChecks.dfyp
