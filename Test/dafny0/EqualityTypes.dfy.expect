EqualityTypes.dfyp(34,13): Error: a type declaration that requires equality support cannot be replaced by a codatatype
EqualityTypes.dfyp(35,11): Error: type 'Y', which does not support equality, is used to refine an opaque type with equality support
EqualityTypes.dfyp(40,11): Error: datatype 'X' is declared with a different number of type parameters (1 instead of 0) than the corresponding datatype in the module it refines
EqualityTypes.dfyp(41,8): Error: class 'Y' is declared with a different number of type parameters (1 instead of 0) than the corresponding class in the module it refines
EqualityTypes.dfyp(45,11): Error: type 'X', which does not support equality, is used to refine an opaque type with equality support
EqualityTypes.dfyp(46,11): Error: type 'Y', which does not support equality, is used to refine an opaque type with equality support
EqualityTypes.dfyp(66,7): Error: == can only be applied to expressions of types that support equality (got Dt<T>)
EqualityTypes.dfyp(85,9): Error: type parameter (T) passed to method M must support equality (got _T0) (perhaps try declaring type parameter '_T0' on line 81 as '_T0(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfyp(109,7): Error: == can only be applied to expressions of types that support equality (got D)
EqualityTypes.dfyp(114,13): Error: == can only be applied to expressions of types that support equality (got D)
EqualityTypes.dfyp(118,16): Error: == can only be applied to expressions of types that support equality (got D)
EqualityTypes.dfyp(147,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(149,13): Error: type parameter (Y) passed to function G must support equality (got Co)
EqualityTypes.dfyp(156,11): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(173,8): Error: set argument type must support equality (got Dt<Co>)
EqualityTypes.dfyp(176,8): Error: set argument type must support equality (got Left<Co, int>)
EqualityTypes.dfyp(177,15): Error: type parameter 1 (U) passed to type Right must support equality (got Co)
EqualityTypes.dfyp(179,17): Error: type parameter 1 (U) passed to type RightExplicit must support equality (got Co)
EqualityTypes.dfyp(181,8): Error: set argument type must support equality (got Syn<int, int, Co>)
EqualityTypes.dfyp(184,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(185,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(192,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(196,11): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(196,20): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(210,8): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(211,20): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(211,29): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(212,17): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(233,12): Error: type parameter (A) passed to method Explicit must support equality (got Co)
EqualityTypes.dfyp(233,13): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(234,19): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(236,34): Error: type parameter (A) passed to method InferEqualitySupportIsRequired must support equality (got Co)
EqualityTypes.dfyp(236,35): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(238,24): Error: set argument type must support equality (got Co)
EqualityTypes.dfyp(239,21): Error: multiset argument type must support equality (got Co)
EqualityTypes.dfyp(241,8): Error: map domain type must support equality (got Co)
EqualityTypes.dfyp(241,14): Error: map domain type must support equality (got Co)
EqualityTypes.dfyp(255,13): Error: type parameter 'T' (inferred to be '?') in the function call to 'UG' could not be determined
EqualityTypes.dfyp(256,4): Error: type parameter 'T' (inferred to be '?') to the method 'UP' could not be determined
EqualityTypes.dfyp(259,8): Error: the type of this local variable is underspecified
EqualityTypes.dfyp(261,4): Error: type parameter 'T' (inferred to be 'set<?>') to the method 'Callee' could not be determined
EqualityTypes.dfyp(264,4): Error: type parameter 'T' (inferred to be 'TakesParam<?>') to the method 'Callee' could not be determined
EqualityTypes.dfyp(284,14): Error: type parameter (T) passed to method Callee must support equality (got Dt)
EqualityTypes.dfyp(285,23): Error: type parameter (T) passed to method Callee must support equality (got Stream<int>)
EqualityTypes.dfyp(289,8): Error: set argument type must support equality (got Dt)
EqualityTypes.dfyp(290,8): Error: iset argument type must support equality (got Dt)
EqualityTypes.dfyp(291,8): Error: multiset argument type must support equality (got ArbitraryTypeArg) (perhaps try declaring type parameter 'ArbitraryTypeArg' on line 282 as 'ArbitraryTypeArg(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfyp(293,8): Error: map domain type must support equality (got Dt)
EqualityTypes.dfyp(295,8): Error: imap domain type must support equality (got Dt)
EqualityTypes.dfyp(303,8): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfyp(305,28): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfyp(306,14): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfyp(309,13): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfyp(312,19): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfyp(313,19): Error: type parameter 1 (X) passed to function H must support equality (got Stream<real>)
EqualityTypes.dfyp(315,19): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfyp(316,19): Error: type parameter 1 (X) passed to function H must support equality (got Stream<real>)
EqualityTypes.dfyp(319,31): Error: type parameter 1 (X) passed to function H must support equality (got Stream<real>)
EqualityTypes.dfyp(321,41): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<real>)
EqualityTypes.dfyp(323,28): Error: type parameter 0 (V) passed to type AClass must support equality (got Stream<int>)
EqualityTypes.dfyp(326,48): Error: type parameter 1 (B) passed to method Q must support equality (got Stream<real>)
EqualityTypes.dfyp(328,33): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfyp(329,45): Error: set argument type must support equality (got Stream<real>)
EqualityTypes.dfyp(330,44): Error: set argument type must support equality (got Stream<int>)
EqualityTypes.dfyp(331,31): Error: set argument type must support equality (got Stream<real>)
EqualityTypes.dfyp(334,7): Error: == can only be applied to expressions of types that support equality (got seq<int -> int>)
EqualityTypes.dfyp(337,14): Error: in can only be applied to expressions of sequence types that support equality (got seq<int -> int>)
EqualityTypes.dfyp(340,16): Error: in can only be applied to expressions of sequence types that support equality (got seq<int -> int>)
EqualityTypes.dfyp(359,11): Error: type parameter (A) passed to type JustOpaque must support equality (got ABC) (perhaps try declaring opaque type 'ABC' on line 354 as 'ABC(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfyp(360,11): Error: type parameter (A) passed to type Synonym must support equality (got ABC) (perhaps try declaring opaque type 'ABC' on line 354 as 'ABC(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfyp(361,11): Error: type parameter (A) passed to type Subset must support equality (got ABC) (perhaps try declaring opaque type 'ABC' on line 354 as 'ABC(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfyp(376,9): Error: == can only be applied to expressions of types that support equality (got List<A>)
EqualityTypes.dfyp(378,9): Error: == can only be applied to expressions of types that support equality (got List<A>)
EqualityTypes.dfyp(381,9): Error: == can only be applied to expressions of types that support equality (got List<A>)
EqualityTypes.dfyp(386,9): Error: == can only be applied to expressions of types that support equality (got (A, List<A>))
EqualityTypes.dfyp(392,9): Error: == can only be applied to expressions of types that support equality (got GhostRecord)
EqualityTypes.dfyp(397,9): Error: == can only be applied to expressions of types that support equality (got Co<A>)
EqualityTypes.dfyp(412,8): Error: set argument type must support equality (got A) (perhaps try declaring type parameter 'A' on line 410 as 'A(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfyp(416,12): Error: in can only be applied to expressions of sequence types that support equality (got seq<A>)
EqualityTypes.dfyp(419,20): Error: in can only be applied to expressions of sequence types that support equality (got seq<A>)
EqualityTypes.dfyp(423,15): Error: <= can only be applied to expressions of sequence types that support equality (got seq<A>)
EqualityTypes.dfyp(427,8): Error: set argument type must support equality (got (A, B))
EqualityTypes.dfyp(429,8): Error: set argument type must support equality (got B) (perhaps try declaring type parameter 'B' on line 425 as 'B(==)', which says it can only be instantiated with a type that supports equality)
EqualityTypes.dfyp(436,8): Error: map domain type must support equality (got A) (perhaps try declaring type parameter 'A' on line 434 as 'A(==)', which says it can only be instantiated with a type that supports equality)
84 resolution/type errors detected in EqualityTypes.dfyp
